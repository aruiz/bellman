/*
 * Bellman Project
 * Copyright (c) 2014, Alberto Ruiz <aruiz@gnome.org>, All rights reserved.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */

package main

import "time"

func main () {
  cfg := NewConfig()
  cache, err := CreateCache(cfg)
  if err != nil {
    print (err.Error())
    return
  }

  p, err :=  cache.GetObject("sessions:live:state")
  if err != nil {
    print (err.Error())
    return
  }

  for {
    dur, _ := time.ParseDuration("1s")
    timeout := time.After(dur)

    for i := 0; i < 30000; i++ {
      go func (c *Cache, p string) {
        payload, _ := cache.GetObject("sessions:live:state")
        if payload != p {
          print ("corruption")
          print (payload)
          return
        }
      } (cache, p)
    }

    print ("iteration\n")
    <-timeout
  }
}
